version: '3.8'

services:
  server:
    image: mafil-psq-server
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      target: development
    command: npm run start:dev
    volumes:
      # changes in host's ./backend directory will be propagated to the container
      - ./backend:/usr/src/app/backend
      # this will let us add packages during development without rebuilding the image
      # - we then need to install added packages (run 'npm i') inside the container in the folder '/usr/src'
      - ./backend/package.json:/usr/src/app/backend/package.json
      - ./backend/package-lock.json:/usr/src/app/backend/package-lock.json
      # this prevents our host files from overriding container's node_modules
      # – some packages may be platform specific so we always want to run 'npm i' in the container when new package is added
      - exclude-server:/usr/src/app/backend/node_modules/
    restart: always

  web:
    image: mafil-psq-web
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
      target: development
    command: npm run dev
    volumes:
      # changes in host's ./frontend directory will be propagated to the container
      - ./frontend:/usr/src/app/frontend
      # this will let us add packages during development without rebuilding the image
      # - we then need to install added packages (run 'npm i') inside the container in the folder '/usr/src'
      - ./frontend/package.json:/usr/src/app/frontend/package.json
      - ./frontend/package-lock.json:/usr/src/app/frontend/package-lock.json
      # this prevents our host files from overriding container's node_modules
      # – some packages may be platform specific so we always want to run 'npm i' in the container when new package is added
      - exclude-web:/usr/src/app/frontend/node_modules/
    restart: always

volumes:
  exclude-server:
  exclude-web:
