version: '3.3'

services:
  postgres:
    container_name: postgres
    image: postgres:alpine3.17
    ports:
      - ${DB_PORT}:${DB_PORT}
    networks:
      - backend-network
    volumes:
      - ./backend/database-storage:/var/lib/postgresql/data
    environment:
      TZ: ${TIMEZONE}
      PGTZ: ${TIMEZONE}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGPORT: ${DB_PORT}
    restart: unless-stopped

  adminer:
    container_name: adminer
    image: adminer:4.8.1
    ports:
      - ${ADMINER_PORT}:${ADMINER_PORT}
    networks:
      - backend-network
    environment:
      TZ: ${TIMEZONE}
      ADMINER_DESIGN: nette
    restart: unless-stopped
    depends_on:
      - postgres

  server:
    container_name: server
    image: mafil-psq-server
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      target: development
    command: npm run start:migrate:dev
    volumes:
      # changes in host's ./backend directory will be propagated to the container
      - ./backend:/usr/src/app/backend
      # this will let us add packages during development without rebuilding the image
      # - we then need to install added packages (run 'npm i') inside the container in the folder '/usr/src'
      - ./backend/package.json:/usr/src/app/backend/package.json
      - ./backend/package-lock.json:/usr/src/app/backend/package-lock.json
      # this prevents our host files from overriding container's node_modules
      # – some packages may be platform specific so we always need to run 'npm i' in the container when new package is added
      - exclude-server:/usr/src/app/backend/node_modules/
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    networks:
      - backend-network
    environment:
      - NODE_ENV=development
      - TZ=${TIMEZONE}
      - PORT=${SERVER_PORT}
      - DATABASE_URL=${DATABASE_URL}
      - THROTTLE_TTL=${THROTTLE_TTL}
      - THROTTLE_LIMIT=${THROTTLE_LIMIT}
      - WEB_API_KEY=${WEB_API_KEY}
      - PDF_OPERATOR_LANGUAGE_CODE=${PDF_OPERATOR_LANGUAGE_CODE}
      # - WEB_DOMAIN=${WEB_DOMAIN}
    restart: unless-stopped
    depends_on:
      - postgres

  web:
    container_name: web
    image: mafil-psq-web
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
      target: development
    command: npm run dev
    volumes:
      # changes in host's ./frontend directory will be propagated to the container
      - ./frontend:/usr/src/app/frontend
      # this will let us add packages during development without rebuilding the image
      # - we then need to install added packages (run 'npm i') inside the container in the folder '/usr/src'
      - ./frontend/package.json:/usr/src/app/frontend/package.json
      - ./frontend/package-lock.json:/usr/src/app/frontend/package-lock.json
      # this prevents our host files from overriding container's node_modules
      # – some packages may be platform specific so we always need to run 'npm i' in the container when new package is added
      - exclude-web:/usr/src/app/frontend/node_modules/
    ports:
      - 3000:3000
    networks:
      - backend-network
      - frontend-network
    environment:
      - NODE_ENV=development
      - TZ=${TIMEZONE}
      - PORT=3000
      - VITE_WEB_API_KEY=${WEB_API_KEY}
      - VITE_SERVER_URL=http://127.0.0.1:${SERVER_PORT}
    restart: unless-stopped
    depends_on:
      - server

networks:
  backend-network:
  frontend-network:

volumes:
  database-storage:
  exclude-server:
  exclude-web:
